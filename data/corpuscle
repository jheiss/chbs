#!/usr/bin/env ruby

# Be sure to run this script under 'bundle exec', otherwise it may attempt to
# update the corpus in your installed copy of the chbs gem.

require 'chbs'
require 'json'
require 'nokogiri'
require 'set'

def main
  offensefile = File.expand_path('offensive.json', File.dirname(__FILE__))
  @offensive = JSON.parse(File.read(offensefile))
  @enable = Set.new
  enablefile = File.expand_path('enable1.txt', File.dirname(__FILE__))
  File.foreach(enablefile) { |enword| @enable << enword.chomp }
  
  if !ARGV[0] || ARGV[0] == 'tv-and-movies'
    tv_and_movies
  end
  if !ARGV[0] || ARGV[0] == 'gutenberg'
    gutenberg
  end
  if !ARGV[0] || ARGV[0] == 'coca'
    coca
  end
  if !ARGV[0] || ARGV[0] == 'babynames'
    babynames
  end
end

def tv_and_movies
  corpus = {}
  
  datadir = File.expand_path('../wiktionary/tv-and-movies/', __FILE__)
  Dir.foreach(datadir) do |file|
    next if file == '.' || file == '..'
    doc = Nokogiri::HTML(File.open(File.join(datadir, file)))
    first = true
    doc.xpath("/html/body/div[@id='content']/div[@id='bodyContent']/div[@class='mw-content-ltr']/table/tr").each do |tr|
      # Skip the header line
      if first
        first = false
        if tr.at_xpath('td/b')
          next
        end
      end
      
      # <tr>
      # <td>1</td>
      # <td><a href="/wiki/you" title="you">you</a></td>
      # <td>1222421</td>
      # </tr>
      # <tr>
      td = tr.xpath('td').to_a
      # Ignore some cruft in a few files
      next if td[0].content.include?('-----')
      rank = td[0].content.to_i
      word = td[1].at_xpath('a').content
      count = td[2].content.to_i
      next if reject_word?(word)
      
      corpus[word] = {rank: rank, length: word.length}
    end
  end
  
  corpusfile = File.join(Chbs::CORPORA_DIRECTORY, 'tv-and-movies.json')
  File.open(corpusfile, 'w') do |file|
    file.write corpus.to_json
  end
  report_on_corpus_generation(corpus, corpusfile)
end

def gutenberg
  corpus = {}
  
  rank = 0
  datadir = File.expand_path('../wiktionary/gutenberg/', __FILE__)
  Dir.foreach(datadir) do |file|
    next if file == '.' || file == '..'
    doc = Nokogiri::HTML(File.open(File.join(datadir, file)))
    doc.xpath("/html/body/div[@id='content']/div[@id='bodyContent']/div[@class='mw-content-ltr']/p/a").each do |a|
      rank += 1
      word = a.content
      next if reject_word?(word)
      corpus[word] = {rank: rank, length: word.length}
    end
  end
  
  corpusfile = File.join(Chbs::CORPORA_DIRECTORY, 'gutenberg.json')
  File.open(corpusfile, 'w') do |file|
    file.write corpus.to_json
  end
  report_on_corpus_generation(corpus, corpusfile)
end

def coca
  corpus = {}
  
  cocafile = File.expand_path('coca.txt', File.dirname(__FILE__))
  File.foreach(cocafile) do |line|
    srank, word = line.split(' ')
    rank = srank.to_i
    if rank.to_s != srank
      abort "Failed to convert rank #{srank} to integer"
    end
    next if reject_word?(word)
    corpus[word] = {rank: rank, length: word.length}
  end
  
  corpusfile = File.join(Chbs::CORPORA_DIRECTORY, 'coca.json')
  File.open(corpusfile, 'w') do |file|
    file.write corpus.to_json
  end
  report_on_corpus_generation(corpus, corpusfile)
end

def babynames
  corpus = {}
  
  babyfile =
    File.expand_path('baby_names_ssa_2012.html', File.dirname(__FILE__))
  doc = Nokogiri::HTML(File.open(babyfile))
  doc.xpath("//table[@summary='Popularity for top 1000']/tr").each do |tr|
    # First row:
    # <tr align="center" valign="bottom">
    #   <th scope="col" width="12%" bgcolor="#efefef">Rank</th>
    #   <th scope="col" width="41%" bgcolor="#99ccff">Male name</th>
    # <th scope="col" bgcolor="pink" width="41%">Female name</th></tr>
    if tr.at_xpath('th')
      next
    end
    # Last row:
    # <tr><td colspan="3"><small>Note: Rank 1 is the most popular,
    # rank 2 is the next most popular, and so forth. 
    # </small></td></tr>
    if tr.at_xpath("td[@colspan='3']")
      next
    end
    
    # Normal row:
    # <tr align="right">
    #  <td>1</td> <td>Jacob</td> <td>Sophia</td>
    # </tr>
    td = tr.xpath('td').to_a
    srank = td[0].content
    rank = srank.to_i
    if rank.to_s != srank
      abort "Failed to convert rank #{srank} to integer"
    end
    boy = td[1].content.downcase
    girl = td[2].content.downcase
    
    [boy, girl].each do |word|
      next if reject_word?(word, false)
      # Some names are in both the boy and girl lists.  Keep the one with the
      # highest rank.
      if !corpus[word]
        corpus[word] = {rank: rank, length: word.length}
      end
    end
  end
  
  corpusfile = File.join(Chbs::CORPORA_DIRECTORY, 'babynames.json')
  File.open(corpusfile, 'w') do |file|
    file.write corpus.to_json
  end
  report_on_corpus_generation(corpus, corpusfile)
end

def reject_word?(word, check_dictionary=true)
  # Skip contractions
  return true if word.include?("'")
  # Skip proper names and capitalized words
  return true if word =~ /^[A-Z]/
  # Skip non-ASCII words
  return true if word =~ /[^a-z]/
  # Skip compound words
  return true if word.include?('-')
  # Skip offensive words
  return true if @offensive['exact'].include?(word)
  return true if @offensive['substring'].any? { |o| word.include?(o) }
  # Skip non-dictionary names
  # This eliminates a lot of the people and place names, as well as gibberish
  # words, from the tv-and-movies corpus.  I'd actually kinda like to keep the
  # place names eventually.
  if check_dictionary
    return true if !@enable.include?(word)
  end
  
  false
end

def report_on_corpus_generation(corpus, corpusfile)
  puts "Wrote corpus with #{corpus.length} words to #{corpusfile}"
end

main
